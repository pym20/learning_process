from __future__ import division
import os

import torch
from PIL import Image
import xml.dom.minidom
import numpy as np

data_root = os.path.abspath(os.path.join(os.getcwd(), "..", "0缺陷图处理"))

ImgPath = data_root #r'E:\深度学习\0缺陷图处理/' #JPG文件地址
AnnoPath = data_root#r'E:\深度学习\0缺陷图处理/'#XML文件地址
ProcessedPath = r'E:\深度学习\t-new/'#存结果地址
#
imagelist = os.listdir(ImgPath)
#
for files in imagelist:
    files_path=os.path.join(ImgPath,files)
    fileslist=os.listdir(files_path)
    for image in fileslist:
        image_pre, ext = os.path.splitext(image)#image_pre是前缀
        if (image==(image_pre+'.jpg')):
            imgfile = os.path.join(files_path,image) #image带jpg，imagepre不带
            print(imgfile)
            print(image_pre,ext)
        if (image != (image_pre + '.jpg')):
            continue
        if not os.path.exists(os.path.join(files_path,image_pre +'.xml')):
            continue#不存在xml文件就跳出此次循环
        xmlfile =os.path.join(files_path,image_pre +'.xml')
        DomTree = xml.dom.minidom.parse(xmlfile)# 根节点
        annotation = DomTree.documentElement#变成类属性
        filenamelist = annotation.getElementsByTagName('filename')#返回具有给定标记名的所有子代元素
        filename = filenamelist[0].childNodes[0].data
        objectlist = annotation.getElementsByTagName('object')#找带object的列成一个表
        i = 1
        # filename只有一个，所以不用循环，object不一定，所以循环
        for objects in objectlist:
            namelist = objects.getElementsByTagName('name')
            objectname = namelist[0].childNodes[0].data
            savepath = ProcessedPath + objectname
            if not os.path.exists(savepath):
                os.makedirs(savepath)
            bndbox = objects.getElementsByTagName('bndbox')
            cropboxes = []
            # 定义想要裁剪的位置
            for box in bndbox:
                x1_list = box.getElementsByTagName('xmin')
                x1 = int(x1_list[0].childNodes[0].data)
                y1_list = box.getElementsByTagName('ymin')
                y1 = int(y1_list[0].childNodes[0].data)
                x2_list = box.getElementsByTagName('xmax')
                x2 = int(x2_list[0].childNodes[0].data)
                y2_list = box.getElementsByTagName('ymax')
                y2 = int(y2_list[0].childNodes[0].data)
                w = x2 - x1#宽
                h = y2 - y1#高
                obj = np.array([x1,y1,x2,y2])
                shift = np.array([[1,1,1,1]])
                XYmatrix = np.tile(obj,(1,1))
                # print(obj)
                # print(shift)
                # print(XYmatrix)
                cropboxes = XYmatrix * shift
                # print(cropboxes)
                img = Image.open(imgfile)
                for cropbox in cropboxes:
                    cropedimg = img.crop(cropbox)#裁剪
                    cropedimg.save(savepath + '/' + image_pre + '_' + str(i) + '.jpg')
                    i += 1
print("hello")
